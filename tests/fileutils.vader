Before:
  Save g:fixtureDir
  Save g:project1Dir
  Save g:subdir
  Save g:marker
  Save g:markerFilePath
  let g:fixtureDir = tempname()
  let g:project1Dir = g:fixtureDir . '/project1'
  let g:subdir = g:project1Dir . '/foo/bar'
  let g:marker = 'composer.json'
  let g:markerFilePath = g:project1Dir . '/' . g:marker

  call mkdir(g:subdir, 'p')
  execute "write " . g:markerFilePath

Execute (Test search upward for the nearest directory containing given file as a g:marker):
  AssertEqual g:project1Dir, project#fileutils#searchUpwardBySingleMarker(g:project1Dir, g:marker)
  AssertEqual g:project1Dir, project#fileutils#searchUpwardBySingleMarker(g:markerFilePath, g:marker)
  AssertEqual g:project1Dir, project#fileutils#searchUpwardBySingleMarker(g:subdir, g:marker)
  AssertEqual v:null, project#fileutils#searchUpwardBySingleMarker(g:fixtureDir, g:marker)

  execute "write " . g:project1Dir . '/foo/' .g:marker
  AssertEqual g:project1Dir . '/foo', project#fileutils#searchUpwardBySingleMarker(g:subdir, g:marker)

Execute (Test project#fileutils#isSubdir()):
  Assert project#fileutils#isSubdir('/usr/bin', '/usr')
  Assert project#fileutils#isSubdir('/usr/', '/usr')
  Assert project#fileutils#isSubdir('/usr', '/usr')
  Assert project#fileutils#isSubdir('/usr', '/usr/')
  Assert ! project#fileutils#isSubdir('/', '/usr')

Execute (Test searching upward given root markers and forbidden dirs):
  let rootMarkers = ['bar', g:marker]
  let forbiddenDirs = []

  AssertEqual g:project1Dir, project#fileutils#searchDirectoryUpwardByRootMarkers(g:subdir, rootMarkers, forbiddenDirs)

  let forbiddenDirs = [g:project1Dir.'/foo']
  AssertEqual v:null, project#fileutils#searchDirectoryUpwardByRootMarkers(g:subdir, rootMarkers, forbiddenDirs)

Execute (Test searching upward with root marker below forbidden dir):
  let vendorDir = g:project1Dir.'/vendor'
  let packageDir = vendorDir.'/package'
  let packageSubDir = packageDir.'/src'
  let rootMarkers = [g:marker]
  let forbiddenDirs = []
  call mkdir(packageSubDir, 'p')
  execute "write " . packageDir."/".g:marker
  AssertEqual packageDir, project#fileutils#searchDirectoryUpwardByRootMarkers(packageSubDir, rootMarkers, forbiddenDirs)
  let forbiddenDirs = [vendorDir]
  AssertEqual packageDir, project#fileutils#searchDirectoryUpwardByRootMarkers(packageSubDir, rootMarkers, forbiddenDirs)

Execute (Test project#fileutils#normalizePath()):
  AssertEqual '/usr', project#fileutils#normalizePath('/usr')
  AssertEqual '/usr', project#fileutils#normalizePath('/usr/')
  AssertEqual '/usr/bin', project#fileutils#normalizePath('/usr//bin/')
  AssertEqual '/usr/bin/env', project#fileutils#normalizePath('/usr//bin/env')

After:
  Restore
